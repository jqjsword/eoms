define(["./when-208fe5b0","./Cartesian2-716c2715","./ArcType-dc1c5aee","./Transforms-f1816abc","./Color-11ac8724","./ComponentDatatype-549ec0d3","./Check-d18af7c4","./GeometryAttribute-0ee94cf1","./GeometryAttributes-b0b294d8","./IndexDatatype-d9b71b2b","./Math-3ba16bed","./PolylinePipeline-fe86878e","./RuntimeError-7f634f5d","./WebGLConstants-76bb35d1","./EllipsoidGeodesic-4bc5cec5","./EllipsoidRhumbLine-886cd793","./IntersectionTests-680c4e46","./Plane-f5dfabcd"],function(L,V,x,S,I,R,f,O,M,U,q,N,e,o,r,t,a,i){"use strict";function c(e){var o=(e=L.defaultValue(e,L.defaultValue.EMPTY_OBJECT)).positions,r=e.colors,t=L.defaultValue(e.colorsPerVertex,!1);if(!L.defined(o)||o.length<2)throw new f.DeveloperError("At least two positions are required.");if(L.defined(r)&&(t&&r.length<o.length||!t&&r.length<o.length-1))throw new f.DeveloperError("colors has an invalid length.");this._positions=o,this._colors=r,this._colorsPerVertex=t,this._arcType=L.defaultValue(e.arcType,x.ArcType.GEODESIC),this._granularity=L.defaultValue(e.granularity,q.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=L.defaultValue(e.ellipsoid,V.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";o=1+o.length*V.Cartesian3.packedLength;o+=L.defined(r)?1+r.length*I.Color.packedLength:1,this.packedLength=o+V.Ellipsoid.packedLength+3}c.pack=function(e,o,r){if(!L.defined(e))throw new f.DeveloperError("value is required");if(!L.defined(o))throw new f.DeveloperError("array is required");var t;r=L.defaultValue(r,0);var a=e._positions,i=a.length;for(o[r++]=i,t=0;t<i;++t,r+=V.Cartesian3.packedLength)V.Cartesian3.pack(a[t],o,r);var l=e._colors,i=L.defined(l)?l.length:0;for(o[r++]=i,t=0;t<i;++t,r+=I.Color.packedLength)I.Color.pack(l[t],o,r);return V.Ellipsoid.pack(e._ellipsoid,o,r),r+=V.Ellipsoid.packedLength,o[r++]=e._colorsPerVertex?1:0,o[r++]=e._arcType,o[r]=e._granularity,o},c.unpack=function(e,o,r){if(!L.defined(e))throw new f.DeveloperError("array is required");o=L.defaultValue(o,0);for(var t=e[o++],a=new Array(t),i=0;i<t;++i,o+=V.Cartesian3.packedLength)a[i]=V.Cartesian3.unpack(e,o);var l=0<(t=e[o++])?new Array(t):void 0;for(i=0;i<t;++i,o+=I.Color.packedLength)l[i]=I.Color.unpack(e,o);var n=V.Ellipsoid.unpack(e,o);o+=V.Ellipsoid.packedLength;var s=1===e[o++],d=e[o++],p=e[o];return L.defined(r)?(r._positions=a,r._colors=l,r._ellipsoid=n,r._colorsPerVertex=s,r._arcType=d,r._granularity=p,r):new c({positions:a,colors:l,ellipsoid:n,colorsPerVertex:s,arcType:d,granularity:p})};var F=new Array(2),H=new Array(2),W={positions:F,height:H,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return c.createGeometry=function(e){var o=e._positions,r=e._colors,t=e._colorsPerVertex,a=e._arcType,i=e._granularity,e=e._ellipsoid,l=q.CesiumMath.chordLength(i,e.maximumRadius),n=L.defined(r)&&!t,s=o.length,d=0;if(a===x.ArcType.GEODESIC||a===x.ArcType.RHUMB){var p,f,c=a===x.ArcType.GEODESIC?(p=q.CesiumMath.chordLength(i,e.maximumRadius),f=N.PolylinePipeline.numberOfPoints,N.PolylinePipeline.generateArc):(p=i,f=N.PolylinePipeline.numberOfPointsRhumbLine,N.PolylinePipeline.generateRhumbArc),y=N.PolylinePipeline.extractHeights(o,e),u=W;if(a===x.ArcType.GEODESIC?u.minDistance=l:u.granularity=i,u.ellipsoid=e,n){for(var h=0,C=0;C<s-1;C++)h+=f(o[C],o[C+1],p)+1;_=new Float64Array(3*h),A=new Uint8Array(4*h),u.positions=F,u.height=H;var g=0;for(C=0;C<s-1;++C){F[0]=o[C],F[1]=o[C+1],H[0]=y[C],H[1]=y[C+1];var T=c(u);if(L.defined(r))for(var m=T.length/3,v=r[C],b=0;b<m;++b)A[g++]=I.Color.floatToByte(v.red),A[g++]=I.Color.floatToByte(v.green),A[g++]=I.Color.floatToByte(v.blue),A[g++]=I.Color.floatToByte(v.alpha);_.set(T,d),d+=T.length}}else if(u.positions=o,u.height=y,_=new Float64Array(c(u)),L.defined(r)){for(A=new Uint8Array(_.length/3*4),C=0;C<s-1;++C)d=function(e,o,r,t,a,i,l){var n=N.PolylinePipeline.numberOfPoints(e,o,a),s=r.red,d=r.green,p=r.blue,f=r.alpha,c=t.red,e=t.green,o=t.blue,a=t.alpha;if(I.Color.equals(r,t)){for(T=0;T<n;T++)i[l++]=I.Color.floatToByte(s),i[l++]=I.Color.floatToByte(d),i[l++]=I.Color.floatToByte(p),i[l++]=I.Color.floatToByte(f);return l}for(var y=(c-s)/n,u=(e-d)/n,h=(o-p)/n,C=(a-f)/n,g=l,T=0;T<n;T++)i[g++]=I.Color.floatToByte(s+T*y),i[g++]=I.Color.floatToByte(d+T*u),i[g++]=I.Color.floatToByte(p+T*h),i[g++]=I.Color.floatToByte(f+T*C);return g}(o[C],o[C+1],r[C],r[C+1],l,A,d);var E=r[s-1];A[d++]=I.Color.floatToByte(E.red),A[d++]=I.Color.floatToByte(E.green),A[d++]=I.Color.floatToByte(E.blue),A[d++]=I.Color.floatToByte(E.alpha)}}else{var P=n?2*s-2:s,_=new Float64Array(3*P),A=L.defined(r)?new Uint8Array(4*P):void 0,B=0,w=0;for(C=0;C<s;++C){var k=o[C];if(n&&0<C&&(V.Cartesian3.pack(k,_,B),B+=3,v=r[C-1],A[w++]=I.Color.floatToByte(v.red),A[w++]=I.Color.floatToByte(v.green),A[w++]=I.Color.floatToByte(v.blue),A[w++]=I.Color.floatToByte(v.alpha)),n&&C===s-1)break;V.Cartesian3.pack(k,_,B),B+=3,L.defined(r)&&(v=r[C],A[w++]=I.Color.floatToByte(v.red),A[w++]=I.Color.floatToByte(v.green),A[w++]=I.Color.floatToByte(v.blue),A[w++]=I.Color.floatToByte(v.alpha))}}e=new M.GeometryAttributes;e.position=new O.GeometryAttribute({componentDatatype:R.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:_}),L.defined(r)&&(e.color=new O.GeometryAttribute({componentDatatype:R.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:A,normalize:!0}));var E=2*((P=_.length/3)-1),D=U.IndexDatatype.createTypedArray(P,E),G=0;for(C=0;C<P-1;++C)D[G++]=C,D[G++]=C+1;return new O.Geometry({attributes:e,indices:D,primitiveType:O.PrimitiveType.LINES,boundingSphere:S.BoundingSphere.fromPoints(o)})},function(e,o){return(e=L.defined(o)?c.unpack(e,o):e)._ellipsoid=V.Ellipsoid.clone(e._ellipsoid),c.createGeometry(e)}});
//# sourceMappingURL=createSimplePolylineGeometry.js.map
