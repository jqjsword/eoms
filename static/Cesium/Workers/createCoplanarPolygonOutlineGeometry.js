define(["./arrayRemoveDuplicates-28d5a12e","./Transforms-f1816abc","./Cartesian2-716c2715","./Check-d18af7c4","./ComponentDatatype-549ec0d3","./CoplanarPolygonGeometryLibrary-dea2b0bb","./when-208fe5b0","./GeometryAttribute-0ee94cf1","./GeometryAttributes-b0b294d8","./GeometryInstance-73b5b8d6","./GeometryPipeline-df743242","./IndexDatatype-d9b71b2b","./PolygonGeometryLibrary-7f112f2e","./Math-3ba16bed","./RuntimeError-7f634f5d","./WebGLConstants-76bb35d1","./OrientedBoundingBox-45cb4e24","./EllipsoidTangentPlane-8e486e83","./IntersectionTests-680c4e46","./Plane-f5dfabcd","./AttributeCompression-69c5b20c","./EncodedCartesian3-7a9c1496","./ArcType-dc1c5aee","./EllipsoidRhumbLine-886cd793","./PolygonPipeline-ac89187a"],function(a,y,c,o,l,p,i,s,d,u,m,b,f,e,t,n,r,g,h,P,G,v,C,k,L){"use strict";function T(e){e=(e=i.defaultValue(e,i.defaultValue.EMPTY_OBJECT)).polygonHierarchy;o.Check.defined("options.polygonHierarchy",e),this._polygonHierarchy=e,this._workerName="createCoplanarPolygonOutlineGeometry",this.packedLength=f.PolygonGeometryLibrary.computeHierarchyPackedLength(e)+1}T.fromPositions=function(e){return e=i.defaultValue(e,i.defaultValue.EMPTY_OBJECT),o.Check.defined("options.positions",e.positions),new T({polygonHierarchy:{positions:e.positions}})},T.pack=function(e,t,n){return o.Check.typeOf.object("value",e),o.Check.defined("array",t),n=i.defaultValue(n,0),t[n=f.PolygonGeometryLibrary.packPolygonHierarchy(e._polygonHierarchy,t,n)]=e.packedLength,t};var E={polygonHierarchy:{}};return T.unpack=function(e,t,n){o.Check.defined("array",e),t=i.defaultValue(t,0);var r=f.PolygonGeometryLibrary.unpackPolygonHierarchy(e,t);t=r.startingIndex,delete r.startingIndex;t=e[t];return(n=!i.defined(n)?new T(E):n)._polygonHierarchy=r,n.packedLength=t,n},T.createGeometry=function(e){var t=e._polygonHierarchy,e=t.positions,e=a.arrayRemoveDuplicates(e,c.Cartesian3.equalsEpsilon,!0);if(!(e.length<3)&&p.CoplanarPolygonGeometryLibrary.validOutline(e)){var n=f.PolygonGeometryLibrary.polygonOutlinesFromHierarchy(t,!1);if(0!==n.length){for(var r=[],o=0;o<n.length;o++){var i=new u.GeometryInstance({geometry:function(e){for(var t=e.length,n=new Float64Array(3*t),r=b.IndexDatatype.createTypedArray(t,2*t),o=0,i=0,a=0;a<t;a++){var y=e[a];n[o++]=y.x,n[o++]=y.y,n[o++]=y.z,r[i++]=a,r[i++]=(a+1)%t}var c=new d.GeometryAttributes({position:new s.GeometryAttribute({componentDatatype:l.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:n})});return new s.Geometry({attributes:c,indices:r,primitiveType:s.PrimitiveType.LINES})}(n[o])});r.push(i)}e=m.GeometryPipeline.combineInstances(r)[0],t=y.BoundingSphere.fromPoints(t.positions);return new s.Geometry({attributes:e.attributes,indices:e.indices,primitiveType:e.primitiveType,boundingSphere:t})}}},function(e,t){return(e=i.defined(t)?T.unpack(e,t):e)._ellipsoid=c.Ellipsoid.clone(e._ellipsoid),T.createGeometry(e)}});
//# sourceMappingURL=createCoplanarPolygonOutlineGeometry.js.map
