define(["./when-208fe5b0","./Cartesian2-716c2715","./arrayRemoveDuplicates-28d5a12e","./BoundingRectangle-307ba31b","./Transforms-f1816abc","./ComponentDatatype-549ec0d3","./PolylineVolumeGeometryLibrary-667758da","./Check-d18af7c4","./GeometryAttribute-0ee94cf1","./GeometryAttributes-b0b294d8","./GeometryPipeline-df743242","./IndexDatatype-d9b71b2b","./Math-3ba16bed","./PolygonPipeline-ac89187a","./VertexFormat-24041ad5","./RuntimeError-7f634f5d","./WebGLConstants-76bb35d1","./EllipsoidTangentPlane-8e486e83","./IntersectionTests-680c4e46","./Plane-f5dfabcd","./PolylinePipeline-fe86878e","./EllipsoidGeodesic-4bc5cec5","./EllipsoidRhumbLine-886cd793","./AttributeCompression-69c5b20c","./EncodedCartesian3-7a9c1496"],function(u,c,n,o,T,G,a,g,A,R,I,O,i,S,y,e,t,r,l,s,d,p,h,m,f){"use strict";var v={};function q(e,t){if(!u.defined(e))throw new g.DeveloperError("identifier is required.");u.defined(v[e])||(v[e]=!0,console.warn(u.defaultValue(t,e)))}function b(e){var t=(e=u.defaultValue(e,u.defaultValue.EMPTY_OBJECT)).polylinePositions,r=e.shapePositions;if(!u.defined(t))throw new g.DeveloperError("options.polylinePositions is required.");if(!u.defined(r))throw new g.DeveloperError("options.shapePositions is required.");this._positions=t,this._shape=r,this._ellipsoid=c.Ellipsoid.clone(u.defaultValue(e.ellipsoid,c.Ellipsoid.WGS84)),this._cornerType=u.defaultValue(e.cornerType,a.CornerType.ROUNDED),this._vertexFormat=y.VertexFormat.clone(u.defaultValue(e.vertexFormat,y.VertexFormat.DEFAULT)),this._granularity=u.defaultValue(e.granularity,i.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";t=1+t.length*c.Cartesian3.packedLength;t+=1+r.length*c.Cartesian2.packedLength,this.packedLength=t+c.Ellipsoid.packedLength+y.VertexFormat.packedLength+2}q.geometryOutlines="Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.",q.geometryZIndex="Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored",q.geometryHeightReference="Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored",q.geometryExtrudedHeightReference="Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored",b.pack=function(e,t,r){if(!u.defined(e))throw new g.DeveloperError("value is required");if(!u.defined(t))throw new g.DeveloperError("array is required");var i;r=u.defaultValue(r,0);var n=e._positions,o=n.length;for(t[r++]=o,i=0;i<o;++i,r+=c.Cartesian3.packedLength)c.Cartesian3.pack(n[i],t,r);var a=e._shape,o=a.length;for(t[r++]=o,i=0;i<o;++i,r+=c.Cartesian2.packedLength)c.Cartesian2.pack(a[i],t,r);return c.Ellipsoid.pack(e._ellipsoid,t,r),r+=c.Ellipsoid.packedLength,y.VertexFormat.pack(e._vertexFormat,t,r),r+=y.VertexFormat.packedLength,t[r++]=e._cornerType,t[r]=e._granularity,t};var E=c.Ellipsoid.clone(c.Ellipsoid.UNIT_SPHERE),w=new y.VertexFormat,P={polylinePositions:void 0,shapePositions:void 0,ellipsoid:E,vertexFormat:w,cornerType:void 0,granularity:void 0};b.unpack=function(e,t,r){if(!u.defined(e))throw new g.DeveloperError("array is required");t=u.defaultValue(t,0);for(var i=e[t++],n=new Array(i),o=0;o<i;++o,t+=c.Cartesian3.packedLength)n[o]=c.Cartesian3.unpack(e,t);var i=e[t++],a=new Array(i);for(o=0;o<i;++o,t+=c.Cartesian2.packedLength)a[o]=c.Cartesian2.unpack(e,t);var l=c.Ellipsoid.unpack(e,t,E);t+=c.Ellipsoid.packedLength;var s=y.VertexFormat.unpack(e,t,w);t+=y.VertexFormat.packedLength;var d=e[t++],p=e[t];return u.defined(r)?(r._positions=n,r._shape=a,r._ellipsoid=c.Ellipsoid.clone(l,r._ellipsoid),r._vertexFormat=y.VertexFormat.clone(s,r._vertexFormat),r._cornerType=d,r._granularity=p,r):(P.polylinePositions=n,P.shapePositions=a,P.cornerType=d,P.granularity=p,new b(P))};var _=new o.BoundingRectangle;return b.createGeometry=function(e){var t=e._positions,r=n.arrayRemoveDuplicates(t,c.Cartesian3.equalsEpsilon),i=e._shape,i=a.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(i);if(!(r.length<2||i.length<3)){S.PolygonPipeline.computeWindingOrder2D(i)===S.WindingOrder.CLOCKWISE&&i.reverse();t=o.BoundingRectangle.fromPoints(i,_);return function(e,t,r,i){var n=new R.GeometryAttributes;i.position&&(n.position=new A.GeometryAttribute({componentDatatype:G.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));var o,a,l,s,d,p=t.length,u=e.length/3,c=(u-2*p)/(2*p),g=S.PolygonPipeline.triangulate(t),y=(c-1)*p*6+2*g.length,h=O.IndexDatatype.createTypedArray(u,y),m=2*p,f=0;for(k=0;k<c-1;k++){for(o=0;o<p-1;o++)d=(a=2*o+k*p*2)+m,s=(l=a+1)+m,h[f++]=l,h[f++]=a,h[f++]=s,h[f++]=s,h[f++]=a,h[f++]=d;s=(l=(a=2*p-2+k*p*2)+1)+m,d=a+m,h[f++]=l,h[f++]=a,h[f++]=s,h[f++]=s,h[f++]=a,h[f++]=d}if(i.st||i.tangent||i.bitangent){for(var v,b,E=new Float32Array(2*u),w=1/(c-1),P=1/r.height,_=r.height/2,x=0,k=0;k<c;k++){for(v=k*w,b=P*(t[0].y+_),E[x++]=v,E[x++]=b,o=1;o<p;o++)b=P*(t[o].y+_),E[x++]=v,E[x++]=b,E[x++]=v,E[x++]=b;b=P*(t[0].y+_),E[x++]=v,E[x++]=b}for(o=0;o<p;o++)v=0,b=P*(t[o].y+_),E[x++]=v,E[x++]=b;for(o=0;o<p;o++)v=(c-1)*w,b=P*(t[o].y+_),E[x++]=v,E[x++]=b;n.st=new A.GeometryAttribute({componentDatatype:G.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(E)})}var C=u-2*p;for(k=0;k<g.length;k+=3){var V=g[k]+C,D=g[k+1]+C,L=g[k+2]+C;h[f++]=V,h[f++]=D,h[f++]=L,h[f++]=L+p,h[f++]=D+p,h[f++]=V+p}var F=new A.Geometry({attributes:n,indices:h,boundingSphere:T.BoundingSphere.fromVertices(e),primitiveType:A.PrimitiveType.TRIANGLES});if(i.normal&&(F=I.GeometryPipeline.computeNormal(F)),i.tangent||i.bitangent){try{F=I.GeometryPipeline.computeTangentAndBitangent(F)}catch(e){q("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}i.tangent||(F.attributes.tangent=void 0),i.bitangent||(F.attributes.bitangent=void 0),i.st||(F.attributes.st=void 0)}return F}(a.PolylineVolumeGeometryLibrary.computePositions(r,i,t,e,!0),i,t,e._vertexFormat)}},function(e,t){return(e=u.defined(t)?b.unpack(e,t):e)._ellipsoid=c.Ellipsoid.clone(e._ellipsoid),b.createGeometry(e)}});
//# sourceMappingURL=createPolylineVolumeGeometry.js.map
